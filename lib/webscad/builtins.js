// Generated by CoffeeScript 1.4.0
(function() {
  var ast, csg, csgOperationModule, cubeModule, cylinderModule, defineModule, differenceModule, intersectModule, sphereModule, translateModule, unimplementedModule, unionModule;

  csg = typeof CSG !== "undefined" && CSG !== null ? CSG : require('../csg_module').CSG;

  ast = require('./ast');

  defineModule = function(params, func) {
    func.params = params;
    return func;
  };

  unimplementedModule = function(name) {
    return defineModule([], function() {
      throw "'" + this.name + "' is not implemented.";
    });
  };

  cubeModule = defineModule(['size'], function(ctx, submodules) {
    var center, radius;
    radius = ctx.getVar('size');
    if (!(radius instanceof Array)) {
      radius = [radius, radius, radius];
    }
    center = ctx.getVar('center') ? [radius[0] / 2, radius[1] / 2, radius[2] / 2] : [0, 0, 0];
    return csg.cube({
      radius: radius,
      center: center
    });
  });

  sphereModule = defineModule(['r'], function(ctx, submodules) {
    var radius;
    radius = ctx.getVar('r');
    return csg.sphere({
      radius: radius,
      center: [0, 0, 0]
    });
  });

  cylinderModule = defineModule(['h', 'r1', 'r2', 'r'], function(ctx, submodules) {
    var height, radius;
    radius = ctx.getVar('r');
    height = ctx.getVar('h');
    return csg.cylinder({
      radius: radius,
      center: [0, 0, 0]
    });
  });

  csgOperationModule = function(csgName) {
    return defineModule([], function(ctx, submodules) {
      var result, submodule, _i, _len;
      for (_i = 0, _len = submodules.length; _i < _len; _i++) {
        submodule = submodules[_i];
        if (!(typeof result !== "undefined" && result !== null)) {
          result = submodule;
        } else {
          result = result[csgName](submodule);
        }
      }
      return result;
    });
  };

  unionModule = csgOperationModule('union');

  intersectModule = csgOperationModule('intersect');

  differenceModule = csgOperationModule('union');

  translateModule = defineModule(['v'], function(ctx, submodules) {
    var submodule, vector, _i, _len, _results;
    vector = ctx.getVar('v');
    _results = [];
    for (_i = 0, _len = submodules.length; _i < _len; _i++) {
      submodule = submodules[_i];
      _results.push(submodule.translate(vector));
    }
    return _results;
  });

  exports.modules = {
    cube: cubeModule,
    cylinder: cylinderModule,
    sphere: sphereModule,
    polyhedron: unimplementedModule('polyhedron'),
    square: unimplementedModule('square'),
    circle: unimplementedModule('circle'),
    polygon: unimplementedModule('polygon'),
    union: unionModule,
    difference: unimplementedModule('difference'),
    intersection: intersectModule,
    render: unimplementedModule('render'),
    translate: translateModule
  };

  exports.functions = {};

}).call(this);
