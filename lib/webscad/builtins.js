// Generated by CoffeeScript 1.4.0
(function() {
  var CSGOperationModule, CubeModule, CylinderModule, SphereModule, TranslateModule, UnimplementedModule, ast, csg, differenceModule, intersectModule, unionModule,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  csg = typeof CSG !== "undefined" && CSG !== null ? CSG : require('../csg_module').CSG;

  ast = require('./ast');

  exports.UnimplementedModule = UnimplementedModule = (function(_super) {

    __extends(UnimplementedModule, _super);

    function UnimplementedModule(name) {
      this.name = name;
      UnimplementedModule.__super__.constructor.call(this, this.name, []);
    }

    UnimplementedModule.prototype.evaluate = function() {
      throw "'" + this.name + "' is not implemented.";
    };

    return UnimplementedModule;

  })(ast.Module);

  CubeModule = (function(_super) {

    __extends(CubeModule, _super);

    function CubeModule() {
      CubeModule.__super__.constructor.call(this, 'cube', [new ast.Identifier('size'), new ast.Identifier('center')]);
    }

    CubeModule.prototype.evaluate = function(ctx, submodules) {
      var center, radius;
      radius = ctx.getVar('size');
      if (!(radius instanceof Array)) {
        radius = [radius, radius, radius];
      }
      center = ctx.getVar('center') ? [radius[0] / 2, radius[1] / 2, radius[2] / 2] : [0, 0, 0];
      return csg.cube({
        radius: radius,
        center: center
      });
    };

    return CubeModule;

  })(ast.Module);

  SphereModule = (function(_super) {

    __extends(SphereModule, _super);

    function SphereModule() {
      SphereModule.__super__.constructor.call(this, 'sphere', [new ast.Identifier('r')]);
    }

    SphereModule.prototype.evaluate = function(ctx, submodules) {
      var radius;
      radius = ctx.getVar('r');
      return csg.sphere({
        radius: radius,
        center: [0, 0, 0]
      });
    };

    return SphereModule;

  })(ast.Module);

  CylinderModule = (function(_super) {

    __extends(CylinderModule, _super);

    function CylinderModule() {
      CylinderModule.__super__.constructor.call(this, 'cylinder', [new ast.Identifier('h'), new ast.Identifier('r1'), new ast.Identifier('r2'), new ast.Identifier('r'), new ast.Identifier('center')]);
    }

    CylinderModule.prototype.evaluate = function(ctx, submodules) {
      var height, radius;
      radius = ctx.getVar('r');
      height = ctx.getVar('h');
      return csg.cylinder({
        radius: radius,
        center: [0, 0, 0]
      });
    };

    return CylinderModule;

  })(ast.Module);

  CSGOperationModule = (function(_super) {

    __extends(CSGOperationModule, _super);

    function CSGOperationModule(name, _csgName) {
      this._csgName = _csgName;
      CSGOperationModule.__super__.constructor.call(this, name, []);
    }

    CSGOperationModule.prototype.evaluate = function(ctx, submodules) {
      var result, submodule, _i, _len;
      for (_i = 0, _len = submodules.length; _i < _len; _i++) {
        submodule = submodules[_i];
        if (!(typeof result !== "undefined" && result !== null)) {
          result = submodule;
        } else {
          result = result[this._csgName](submodule);
        }
      }
      return result;
    };

    return CSGOperationModule;

  })(ast.Module);

  unionModule = new CSGOperationModule('union', 'union');

  intersectModule = new CSGOperationModule('intersect', 'intersect');

  differenceModule = new CSGOperationModule('difference', 'union');

  TranslateModule = (function(_super) {

    __extends(TranslateModule, _super);

    function TranslateModule() {
      TranslateModule.__super__.constructor.call(this, 'translate', [new ast.Identifier('v')]);
    }

    TranslateModule.prototype.evaluate = function(ctx, submodules) {
      var submodule, vector, _i, _len, _results;
      vector = ctx.getVar('v');
      _results = [];
      for (_i = 0, _len = submodules.length; _i < _len; _i++) {
        submodule = submodules[_i];
        _results.push(submodule.translate(vector));
      }
      return _results;
    };

    return TranslateModule;

  })(ast.Module);

  exports.modules = {
    cube: new CubeModule(),
    cylinder: new CylinderModule(),
    sphere: new SphereModule(),
    polyhedron: new UnimplementedModule('polyhedron'),
    square: new UnimplementedModule('square'),
    circle: new UnimplementedModule('circle'),
    polygon: new UnimplementedModule('polygon'),
    union: unionModule,
    difference: new UnimplementedModule('difference'),
    intersection: intersectModule,
    render: new UnimplementedModule('render'),
    translate: new TranslateModule
  };

  exports.functions = {};

}).call(this);
