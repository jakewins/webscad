// Generated by CoffeeScript 1.4.0
(function() {
  var CubeModule, UnimplementedModule, ast,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ast = require('./ast');

  exports.UnimplementedModule = UnimplementedModule = (function(_super) {

    __extends(UnimplementedModule, _super);

    function UnimplementedModule(name) {
      this.name = name;
    }

    UnimplementedModule.prototype.evaluate = function() {
      throw "'" + this.name + "' is not implemented.";
    };

    return UnimplementedModule;

  })(ast.Module);

  CubeModule = (function(_super) {

    __extends(CubeModule, _super);

    function CubeModule() {
      CubeModule.__super__.constructor.call(this, 'cube', [new ast.Identifier('size'), new ast.Identifier('center')]);
    }

    CubeModule.prototype.evaluate = function(ctx, submodules) {
      return new csg.Cube(ctx.getVar('size'), ctx.getVar('center'));
    };

    return CubeModule;

  })(ast.Module);

  exports.modules = {
    cube: new CubeModule(),
    cylinder: new UnimplementedModule('cylinder'),
    sphere: new UnimplementedModule('sphere'),
    polyhedron: new UnimplementedModule('polyhedron'),
    square: new UnimplementedModule('square'),
    circle: new UnimplementedModule('circle'),
    polygon: new UnimplementedModule('polygon'),
    union: new UnimplementedModule('union'),
    difference: new UnimplementedModule('difference'),
    intersection: new UnimplementedModule('intersection'),
    render: new UnimplementedModule('render')
  };

  exports.functions = {};

}).call(this);
