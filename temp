Compilation:

  root_module = parse(text)

  root_inst = ModuleCall()
  root_node = root_module->evaluate(root_ctx,root_inst)
  
Evaluation:

  Create a result tree from AST tree

Compile CSG:

  Create CSG term tree
  
  Normalize term tree
  
  Convert term tree to CSG Chain
  
  
  Primitive == A polyset
  
  Term == tree item, either a primitive,
  or a CSG operation (consisting of left,
  right, and type)
  
  // Create CSG chains for each layer
  // (normal, background, highlight)
  
Render:


  For each polyset in csg chain
  
    do crazy shit (mainwin.cc:1613)
    
    polyset.render_surface()
  
